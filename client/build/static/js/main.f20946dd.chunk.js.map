{"version":3,"sources":["api.js","components/Login.js","components/Register.js","components/Scrape.js","components/Navigation.js","App.js","reportWebVitals.js","index.js"],"names":["api","axios","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","error","Promise","reject","Login","_ref","setAuth","email","setEmail","useState","password","setPassword","setError","loading","setLoading","navigate","useNavigate","React","createElement","style","color","onSubmit","async","e","preventDefault","response","post","setItem","data","type","value","onChange","target","required","disabled","Register","username","setUsername","err","console","Scrape","url","setUrl","setData","placeholder","onClick","JSON","stringify","Navigation","Link","to","App","isAuthenticated","setIsAuthenticated","Router","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.f20946dd.chunk.js","sourcesContent":["// src/api.js\nimport axios from 'axios';\n\nconst api = axios.create({\n    baseURL: '/api',\n});\n\napi.interceptors.request.use(\n    (config) => {\n        const token = localStorage.getItem('token');\n        if (token) {\n            config.headers['x-auth-token'] = token;\n        }\n        return config;\n    },\n    (error) => Promise.reject(error)\n);\n\nexport default api;\n","// src/components/Login.js\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport api from '../api';\n\nconst Login = ({ setAuth }) => {\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(false);\n    const navigate = useNavigate(); // Add this hook\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        setLoading(true);\n        setError('');\n        try {\n            const response = await api.post('/auth/login', { email, password });\n            localStorage.setItem('token', response.data.token);\n            setAuth(true);\n            navigate('/scrape'); // Redirect to /scrape or another page on successful login\n        } catch (error) {\n            setError('Login failed. Please check your credentials.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <div>\n            <h2>Login</h2>\n            {error && <p style={{ color: 'red' }}>{error}</p>}\n            <form onSubmit={handleSubmit}>\n                <div>\n                    <label>Email:</label>\n                    <input\n                        type=\"email\"\n                        value={email}\n                        onChange={(e) => setEmail(e.target.value)}\n                        required\n                    />\n                </div>\n                <div>\n                    <label>Password:</label>\n                    <input\n                        type=\"password\"\n                        value={password}\n                        onChange={(e) => setPassword(e.target.value)}\n                        required\n                    />\n                </div>\n                <button type=\"submit\" disabled={loading}>\n                    {loading ? 'Logging in...' : 'Login'}\n                </button>\n            </form>\n        </div>\n    );\n};\n\nexport default Login;\n","// src/components/Register.js\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport api from '../api';\n\nconst Register = () => {\n    const [username, setUsername] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n    const navigate = useNavigate(); // Hook to navigate programmatically\n\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            await api.post('/auth/register', { username, email, password });\n            // Redirect to login page or show a success message\n            navigate('/login'); // Redirects to the login page after successful registration\n        } catch (err) {\n            console.error(err.response.data);\n            // Optionally, you can set some error state here to display to the user\n        }\n    };\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <h2>Register</h2>\n            <label>Username:</label>\n            <input\n                type=\"text\"\n                value={username}\n                onChange={(e) => setUsername(e.target.value)}\n                required\n            />\n            <label>Email:</label>\n            <input\n                type=\"email\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                required\n            />\n            <label>Password:</label>\n            <input\n                type=\"password\"\n                value={password}\n                onChange={(e) => setPassword(e.target.value)}\n                required\n            />\n            <button type=\"submit\">Register</button>\n        </form>\n    );\n};\n\nexport default Register;\n","// src/components/Scrape.js\nimport React, { useState } from 'react';\nimport api from '../api';\n\nconst Scrape = () => {\n    const [url, setUrl] = useState('');\n    const [data, setData] = useState(null);\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(false);\n\n    const handleScrape = async () => {\n        if (!url) {\n            setError('Please enter a URL.');\n            return;\n        }\n        setLoading(true);\n        setError('');\n        try {\n            const response = await api.post('/scrape', { url });\n            setData(response.data);\n        } catch (error) {\n            setError('Scraping failed. Please check the URL and try again.');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    return (\n        <div>\n            <h2>Scrape Data</h2>\n            {error && <p style={{ color: 'red' }}>{error}</p>}\n            <input\n                type=\"text\"\n                value={url}\n                onChange={(e) => setUrl(e.target.value)}\n                placeholder=\"Enter URL\"\n            />\n            <button onClick={handleScrape} disabled={loading}>\n                {loading ? 'Scraping...' : 'Scrape'}\n            </button>\n            {data && (\n                <div>\n                    <h3>Scraped Data:</h3>\n                    <pre>{JSON.stringify(data, null, 2)}</pre>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Scrape;\n","// src/components/Navigation.js\nimport React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Navigation = () => (\n    <nav>\n        <ul>\n            <li>\n                <Link to=\"/login\">Login</Link>\n            </li>\n            <li>\n                <Link to=\"/register\">Register</Link>\n            </li>\n            <li>\n                <Link to=\"/scrape\">Scrape</Link>\n            </li>\n        </ul>\n    </nav>\n);\n\nexport default Navigation;\n","// src/App.js\nimport React, { useState } from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport Login from './components/Login';\nimport Register from './components/Register';\nimport Scrape from './components/Scrape';\nimport Navigation from './components/Navigation';\n\nconst App = () => {\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n    return (\n        <Router>\n            <div>\n                <Navigation />\n                <Routes>\n                    <Route path=\"/login\" element={<Login setAuth={setIsAuthenticated} />} />\n                    <Route path=\"/register\" element={<Register />} />\n                    <Route path=\"/scrape\" element={isAuthenticated ? <Scrape /> : <Login setAuth={setIsAuthenticated} />} />\n                </Routes>\n            </div>\n        </Router>\n    );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}